@page "/EditQuestion/{id:int}"
@inject HttpClient httpclient
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager
@inject IQuestionService ServiceQuestion

<PageTitle>Επεξεργασία Ερώτησης</PageTitle>
<AuthorizeView Context="authcontext" Roles="Admin">
    <Authorized>
        @if (_question == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="container mt-3">
                <div class="row justify-content-center">
                    <div class="col-lg-6 col-md-8 col-sm-10">
                        <div class="shadow p-3 mb-5 bg-white rounded">
                            <h2 class="mb-4 text-center">Επεξεργασία Ερώτησης @id</h2>
                            <EditForm Model="_question" OnSubmit="Update">
                                <div class="mb-3">
                                    <div class="form-group">
                                        <label for="questionText">Γράψε την Ερώτηση</label>
                                        <InputText id="questionText" class="form-control" @bind-Value="@_question.Text" />
                                    </div>
                                </div>
                                @{
                                    int index = 0;
                                }
                                @foreach(var answers in _question.Answers)
                                {
                                    index++;
                                    <div class="mb-3">
                                        <div class="form-group">
                                            <label for="@index">Απάντηση @index:</label>
                                            <InputText class="form-control" type="text" id="@index" @bind-Value="@answers.Text" />
                                        </div>
                                    </div>
                                }
                                <div class="mb-3">
                                    <label for="CorrectAnswer"> Επέλεξε την σωστή απάντηση </label>
                                    <InputSelect id="CorrectAnswer" @bind-Value="@_question.CorrectAnswerId">
                                        @for (int i = 1; i <= maxIndex; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="text-center">
                                    <button type="submit" class="btn btn-primary">Υποβολή</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <h1>Δεν επιτρέπεται η πρόσβαση</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public int id { get; set; }
    Question _question;
    public int maxIndex;

    protected override async Task OnInitializedAsync()
    {

        var token = await LocalStorage.GetItemAsStringAsync("token");
        var jwt_validation = await httpclient.PostAsJsonAsync("api/Auth/ValidateJWT",token);
        var jwt_validation_result = jwt_validation.Content.ReadAsStringAsync().Result;
        if (jwt_validation_result == "Invalid")
        {
            await LocalStorage.RemoveItemAsync("token");
            await AuthState.GetAuthenticationStateAsync();
            NavManager.NavigateTo("/");
        }
        else
        {
            var authenticationState = await AuthState.GetAuthenticationStateAsync();
            var User = authenticationState.User;
            if (User.IsInRole("Admin"))
            {
                try
                {
                    await ServiceQuestion.GetQuestionById(id);
                    _question = ServiceQuestion.question;
                    maxIndex = _question.Answers.Count();
                }
                catch (Exception ex)
                {
                    _question = null; // Update the _question variable to null when an exception occurs
                    maxIndex = 0;     // Set maxIndex to 0 or any other appropriate value
                    NavManager.NavigateTo("/");
                }

            }
        }
    }
    private async Task Update()
    {

        //var result = await httpclient.PutAsJsonAsync($"api/Question/{id}",_question);
        var result = await ServiceQuestion.UpdateQuestion(id, _question);

        NavManager.NavigateTo("/QuestionPanel");
        //Redirect to Question Page

    }
}
